{"version":3,"file":"index.mjs","sources":["../../src/rollup-plugin/index.ts"],"sourcesContent":["import { resolve } from 'path';\nimport { rollup } from 'rollup';\nimport { buildWorkerCode } from '../core';\nimport type { InputOptions, Plugin } from 'rollup';\n\nconst PLUGIN_NAME = '@pixi/webworker-plugins/rollup-plugin';\nconst VIRTUAL_MODULE_PREFIX = `\\0${PLUGIN_NAME}:`;\n\nconst DEFAULT_OPTIONS = {\n    worker: {\n        pattern: /worker:(.+\\.worker\\.[cm]?[jt]s)/,\n        assertionType: 'worker',\n    },\n};\n\nexport default (() =>\n{\n    const state = {\n        exclude: new Set(),\n        options: null as InputOptions | null,\n    };\n\n    return {\n        name: PLUGIN_NAME,\n\n        options(options)\n        {\n            state.options = options;\n\n            return null;\n        },\n        resolveId(source, importer, options)\n        {\n            let importee = null;\n\n            const assertType = options.assertions.type;\n\n            if (assertType === DEFAULT_OPTIONS.worker.assertionType) importee = source;\n            else\n            {\n                const patternMatch = source.match(DEFAULT_OPTIONS.worker.pattern);\n\n                if (patternMatch) importee = patternMatch[1];\n            }\n\n            if (importee === null) return null;\n\n            const resolvedPath = resolve(importer ? resolve(importer, '..') : '.', importee);\n            const id = VIRTUAL_MODULE_PREFIX + resolvedPath;\n\n            if (state.exclude.has(id)) return null;\n\n            return {\n                id,\n                assertions: { type: DEFAULT_OPTIONS.worker.assertionType },\n            };\n        },\n        async load(id)\n        {\n            if (!id.startsWith(VIRTUAL_MODULE_PREFIX)) return null;\n\n            const source = id.slice(VIRTUAL_MODULE_PREFIX.length);\n\n            state.exclude.add(id);\n\n            const bundle = await rollup({\n                plugins: state.options?.plugins,\n                input: source,\n            });\n\n            state.exclude.delete(id);\n\n            const output = await bundle.generate({\n                format: 'iife',\n                name: 'WorkerLoader',\n            });\n\n            const workerCode = output.output[0].code;\n\n            const code = buildWorkerCode(workerCode, 'esm');\n\n            return {\n                code,\n                assertions: { type: DEFAULT_OPTIONS.worker.assertionType },\n            };\n        },\n    } as Plugin;\n});\n"],"names":[],"mappings":"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"}